#!/usr/bin/env perl
# Opportunistic HTML Generator
# Copyright(c) 2004 by wave++ (Yuri D'Elia) <wavexx@users.sf.net>
# Distributed under GNU LGPL without ANY warranty.

# perl intrinsics
use strict;

# some globals
my $incode = 0;
my $inquot = 0;
my $inlist = 0;
my $list;

# utility functions
sub par_end()
{
  if($incode)
  {
    $incode = 0;
    print "</pre>";
  }
  elsif($inquot)
  {
    $inquot = 0;
    print "</blockquote>";
  }
  elsif($inlist)
  {
    $inlist = 0;
    print "</$list>";
  }
}


sub par_start($)
{
  par_end;
  my $title = shift;
  print "<a name=\"$title\"><h2>$title</h2>";
}


sub list_start($)
{
  my $type = shift;
  if(!$inlist || ($type ne $list))
  {
    par_end if($inlist);
    $inlist = 1;
    $list = $type;
    print "<$list>";    
  }
}


sub print_code($)
{
  $_ = shift;
  my ($first, $rest) = /^(\Q$incode\E)(.*)/;
  if($first) {
    print "$rest\n";
  } else {
    print;
  }
}


# main loop
print "<html><body>";

while(<>)
{
  # html escaping
  s/&/&amp;/g;
  s/</&lt;/g;
  s/>/&gt;/g;
  s/\(r\)/&reg;/g;
  s/\(c\)/&copy;/g;
  s/\(tm\)/&trade;/g;
  s/\"/&quot;/g;

  # text structure
  if($incode)
  {
    print_code $_;
    if(/^\s*(?:END|EOF)\s*$/)
    {
      print "</pre>";
      $incode = 0;
    }
    next;
  }
  elsif(/^(\s+)((?:\#!|\$\s).*)/)
  {
    print "<pre>$2\n";
    $incode = $1;
    next;
  }
  elsif(/^$/)
  {
    print "<p>";
    next;
  }
  elsif(/^(\S.*)$/)
  {
    par_start $1;
    next;
  }
  elsif(!$inquot && /^\t([^\t]+)\t+(.*)/)
  {
    list_start "dl";
    print "<dt>$1<dd>";

    $_ = $2;
  }
  elsif(!$inquot && /^\t([*-]|\d+[\):]?)\s+(.*)/)
  {
    $_ = $2;
    list_start ($1 =~ /[*-]/? "ul": "ol");
    print "<li>";
  }
  elsif(/^(\t+)/)
  {
    my $level = (length $1) - 1;
    if(!($inquot || $inlist) && $level)
    {
      $inquot = 1;
      print "<blockquote>";
    }
    elsif(!$level && (!$inlist || $list eq "dl")) {
      par_end;
    }
  }
  
  # normal text
  s/[ \t]+/ /g;
  s/&lt;([^\"@]+@[^\">]+)&gt;/&lt;<a href="mailto:$1">$1<\/a>&gt;/g;
  s/\*(\w+)\*/<strong>$1<\/strong>/g;
  s/\b([A-Z]{2,})\b/<em>$1<\/em>/g;
  s/(\w+:\/\/[^\s&]+)/<a href="$1">$1<\/a>/g;

  print;
}
par_end;

print "</body></html>\n";
